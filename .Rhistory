?solve
a= null
a= NULL
a
rm(list=ls())
set <- function(y) {
x <<- y
M <<- NULL
}
rm(list=ls())
set <- function(y) {
x <<- y
M <<- NULL
}
set(5)
?matrix
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
M <- NULL
set <- function(y) {
x <<- y
M <<- NULL
}
get <- function() x
setmean <- function(mean) M <<- mean
getmean <- function() M
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeCacheMatrix(5)
Matrix1<-seq(1:9)
a<-seq(1:9)
matrix1<-matrix(a,3,3)
matrix1
makeCacheMatrix(matrix1)
rm(list=ls())
# 4. get the value of inverse of the matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set=set, get=get, setinverse=setinverse, getinverse=getinverse)
}
# The following function returns the inverse of the matrix. It first checks if
# the inverse has already been computed. If so, it gets the result and skips the
# computation. If not, it computes the inverse, sets the value in the cache via
# setinverse function.
# This function assumes that the matrix is always invertible.
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data.")
return(inv)
}
data <- x$get()
inv <- solve(data)
x$setinverse(inv)
inv
}
makeCacheMatrix(matrix1)
x<-matrix(a,3,3)
x
a<-seq(1:9)
x<-matrix(a,3,3)
x
makeCacheMatrix(x)
m=makeCacheMatrix(x)
a<-seq(1:9)
x<-matrix(a,3,3)
x
m=makeCacheMatrix(x)
m$get()
cacheSolve(m)
rm(list=ls())
a=2 b=3
a<-2 b<-3
M<-matrix()
class(M)
summary(M)
?getmean
mean
f <- function(x) x^2
f(2)
f <- function() {
x <- 1
y <- 2
c(x, y)
}
f()
x <- 2
g <- function() {
y <- 1
c(x, y)
}
g()
x <- 1
h <- function() {
y <- 2
i <- function() {
z <- 3
c(x, y, z)
}
i()
}
h()
j <- function(x) {
y <- 2
function() {
c(x, y)
}
}
k <- j(1)
k()
f <- function() x + 1
f(1)
rm(list=ls())
